// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    [Migration("20230612090322_CompanyDbMigration")]
    partial class CompanyDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DatabaseTask.Core.Domain.Branch", b =>
                {
                    b.Property<Guid>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterCode")
                        .HasColumnType("int");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Child", b =>
                {
                    b.Property<Guid>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChildAgeInYears")
                        .HasColumnType("int");

                    b.Property<string>("ChildFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeChildrenConnectionConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChildId");

                    b.HasIndex("EmployeeChildrenConnectionConnectionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ContractEndingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobTitleHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SocialSecurityNumber")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("JobTitleHistoryId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.EmployeeChildrenConnection", b =>
                {
                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConnectionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeChildrenConnections");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Hint", b =>
                {
                    b.Property<Guid>("HintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HintContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HintStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HintSubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HintId");

                    b.HasIndex("BranchId");

                    b.ToTable("Hints");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitle", b =>
                {
                    b.Property<Guid>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobTitleHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("JobTitleHistoryId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitleHistory", b =>
                {
                    b.Property<Guid>("JobTitleHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentJobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobTitleDurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("JobTitleStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobTitleHistoryId");

                    b.ToTable("JobTitleHistories");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Permissions", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PermissionsExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PermissionsGrantedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionsId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.PhysicalEvaluation", b =>
                {
                    b.Property<Guid>("PhysicalEvalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AidEquipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Limitations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PhysicalEvaluationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PhysicalEvalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PhysicalEvaluations");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Rental", b =>
                {
                    b.Property<Guid>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RentalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.RentalItem", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RentalId");

                    b.ToTable("RentalItems");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestSubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestId");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.SickLeave", b =>
                {
                    b.Property<Guid>("SickLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SickLeaveDurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("SickLeaveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SickLeaveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SickLeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SickLeaveId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SickLeaves");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Vacation", b =>
                {
                    b.Property<Guid>("VacationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VacationDurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("VacationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VacationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VacationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Child", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.EmployeeChildrenConnection", null)
                        .WithMany("Children")
                        .HasForeignKey("EmployeeChildrenConnectionConnectionId");

                    b.HasOne("DatabaseTask.Core.Domain.Employee", "EmployeeAsParent")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeAsParent");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.JobTitleHistory", "JobTitleHistory")
                        .WithMany()
                        .HasForeignKey("JobTitleHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("JobTitleHistory");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.EmployeeChildrenConnection", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "EmployeeAsParent")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeAsParent");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Hint", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitle", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.JobTitleHistory", null)
                        .WithMany("JobTitleList")
                        .HasForeignKey("JobTitleHistoryId");

                    b.HasOne("DatabaseTask.Core.Domain.Permissions", null)
                        .WithMany("JobTitleList")
                        .HasForeignKey("PermissionsId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Permissions", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.PhysicalEvaluation", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Rental", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "RentingEmployee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentingEmployee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.RentalItem", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.Rental", null)
                        .WithMany("RentalItems")
                        .HasForeignKey("RentalId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Request", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.SickLeave", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Vacation", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.EmployeeChildrenConnection", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitleHistory", b =>
                {
                    b.Navigation("JobTitleList");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Permissions", b =>
                {
                    b.Navigation("JobTitleList");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Rental", b =>
                {
                    b.Navigation("RentalItems");
                });
#pragma warning restore 612, 618
        }
    }
}
